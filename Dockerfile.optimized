# =====================================
# YesCode Monitor 生产环境 Dockerfile
# =====================================

FROM node:18-alpine AS base
WORKDIR /app

# 安装必要的系统依赖
RUN apk add --no-cache \
    libc6-compat \
    curl \
    wget \
    dumb-init \
    && rm -rf /var/cache/apk/*

# 设置时区
RUN apk add --no-cache tzdata
ENV TZ=Asia/Shanghai

# =====================================
# 依赖安装阶段
# =====================================
FROM base AS deps
COPY package*.json ./
RUN npm ci --only=production --frozen-lockfile --no-audit

# =====================================
# 构建阶段
# =====================================
FROM base AS builder
COPY package*.json ./
RUN npm ci --frozen-lockfile --no-audit

COPY . .

# 生成 Prisma 客户端
RUN npx prisma generate

# 构建应用
RUN npm run build

# =====================================
# 生产运行阶段
# =====================================
FROM base AS production

ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 创建非root用户
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 创建必要的目录
RUN mkdir -p /app/logs && chown -R nextjs:nodejs /app/logs

# 复制依赖
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# 复制构建产物
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# 复制 Prisma 相关文件
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma

# 复制启动脚本
COPY --chown=nextjs:nodejs scripts/docker-start.sh ./start.sh
RUN chmod +x ./start.sh

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/dashboard || exit 1

# 暴露端口
EXPOSE 3000

# 切换到非root用户
USER nextjs

# 使用dumb-init作为PID 1
ENTRYPOINT ["dumb-init", "--"]

# 启动应用
CMD ["./start.sh"]